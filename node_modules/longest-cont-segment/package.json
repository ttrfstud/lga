{
  "name": "longest-cont-segment",
  "version": "0.0.0",
  "description": "longest continuous segment algorithm",
  "main": "index.js",
  "author": "",
  "devDependencies": {
    "mocha": "~1.18.2"
  },
  "readme": "longest continuous segment algorithm\n====================================\nan attempt to code lcs as described [here](http://predictioncenter.org/casp/casp7/public/doc/LCS_GDT.README). the signature of the only exported method is _(protein1, protein2, cut)_, where:\n\n  * proteinN, N in [1,2], is an array of protein CA atoms positions:\n\n  ```\n  [\n    [x1, y1, z1],\n    [x2, y1, z2],\n    ...\n  ]\n  ```\n\n  * cut is angstrom rmsd cut for lcs run\n\nreturn value has the following format:\n\n```javascript\n{\n  subs: [ { tgt: [], exp: [] }],\n  stats: []\n}\n```\n\nwhere subs is an array of all matched segments in the second protein (model, tgt) and the first protein (exp). tgt and exp arrays in each record are zero-based references to residues in second and first proteins, respectively. stats is an array indexed by zero-based residue indices of first protein, where the value at *i* is the length of the longest segment in second protein where i-th residue of the first protein, while being matched - probably along with other residues, had the longest match.\n\n",
  "readmeFilename": "README.md",
  "_id": "longest-cont-segment@0.0.0",
  "dist": {
    "shasum": "5bd12aea8c01dd443c534bb8900b7ec147028e14"
  },
  "_from": "longest-cont-segment@0.0.0",
  "_resolved": "https://registry.npmjs.org/longest-cont-segment/-/longest-cont-segment-0.0.0.tgz"
}
